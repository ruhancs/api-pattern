basePath: /
definitions:
  dto.GetJwtDto:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.GetJwtOutputDto:
    properties:
      access_token:
        type: string
    type: object
  dto.ProductCreateDto:
    properties:
      name:
        type: string
      price:
        type: integer
    type: object
  dto.UserCreateDto:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  entity.Product:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: integer
    type: object
  handler.Error:
    properties:
      message:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: Ruhan CS
    url: ruhancorreasoares@gmail.com
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: API Pattern
  version: "1.0"
paths:
  /products:
    get:
      consumes:
      - application/json
      description: Find All products
      parameters:
      - description: page number
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Find All products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: create product
      parameters:
      - description: product request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProductCreateDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Create product
      tags:
      - products
  /products/{id}:
    get:
      consumes:
      - application/json
      description: Get products
      parameters:
      - description: product id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get products
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update products
      parameters:
      - description: product id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Update products
      tags:
      - products
  /users:
    post:
      consumes:
      - application/json
      description: create user
      parameters:
      - description: user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreateDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      summary: Create user
      tags:
      - users
  /users/get_token:
    post:
      consumes:
      - application/json
      description: Get a user jwt to authenticate
      parameters:
      - description: user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetJwtDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetJwtOutputDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      summary: Get a user jwt
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
